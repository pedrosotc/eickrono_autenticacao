version: "3.9"

services:
  banco-postgres:
    image: postgres:15.5
    container_name: eickrono-postgres-dev
    env_file:
      - .env.dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - banco_postgres_dev:/var/lib/postgresql/data
    networks:
      - rede_interna_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  servidor-autorizacao:
    image: quay.io/keycloak/keycloak:24.0.5
    container_name: eickrono-keycloak-dev
    command:
      [
        "start-dev",
        "--import-realm",
        "--hostname-strict=false",
        "--http-enabled=true",
        "--spi-theme-static-max-age=-1"
      ]
    env_file:
      - .env.dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_URL_HOST: ${KC_DB_URL_HOST}
      KC_DB_URL_DATABASE: ${KC_DB_URL_DATABASE}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_PROXY: ${KC_PROXY}
    depends_on:
      banco-postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ../../modulos/servidor-autorizacao-eickrono/realms:/opt/keycloak/data/import:ro
      - ../../modulos/servidor-autorizacao-eickrono/temas-login-ptbr:/opt/keycloak/themes/login-ptbr:ro
      - ../../modulos/servidor-autorizacao-eickrono/configuracoes-fapi:/opt/keycloak/providers/configuracoes-fapi:ro
      - ../../modulos/servidor-autorizacao-eickrono/mapeamentos-atributos:/opt/keycloak/providers/mapeamentos-atributos:ro
      - ../../modulos/servidor-autorizacao-eickrono/scripts-spi:/opt/keycloak/providers/scripts-spi:ro
      - ./certificados:/certificados:ro
    networks:
      - rede_interna_dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 15s
      timeout: 5s
      retries: 5

  api-identidade-eickrono:
    build:
      context: ../../modulos/api-identidade-eickrono
      dockerfile: Dockerfile
    container_name: eickrono-api-identidade-dev
    env_file:
      - .env.dev
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://banco-postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: identidade
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${OIDC_ISSUER_URI}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${OIDC_JWKS_URI}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      SERVIDOR_AUTORIZACAO_MTLS_CERTIFICADO: ${MTLS_CERT_PATH}
      SERVIDOR_AUTORIZACAO_MTLS_SENHA: ${MTLS_CERT_SENHA}
    ports:
      - "${API_IDENTIDADE_PORT}:8081"
    depends_on:
      banco-postgres:
        condition: service_healthy
      servidor-autorizacao:
        condition: service_healthy
    networks:
      - rede_interna_dev

  api-contas-eickrono:
    build:
      context: ../../modulos/api-contas-eickrono
      dockerfile: Dockerfile
    container_name: eickrono-api-contas-dev
    env_file:
      - .env.dev
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://banco-postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: contas
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${OIDC_ISSUER_URI}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${OIDC_JWKS_URI}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      SERVIDOR_AUTORIZACAO_MTLS_CERTIFICADO: ${MTLS_CERT_PATH}
      SERVIDOR_AUTORIZACAO_MTLS_SENHA: ${MTLS_CERT_SENHA}
    ports:
      - "${API_CONTAS_PORT}:8082"
    depends_on:
      banco-postgres:
        condition: service_healthy
      servidor-autorizacao:
        condition: service_healthy
    networks:
      - rede_interna_dev

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    container_name: eickrono-otel-collector-dev
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    networks:
      - rede_interna_dev

networks:
  rede_interna_dev:
    driver: bridge

volumes:
  banco_postgres_dev:
